<?xml version="1.0"?>
<launch>
  <arg name="use_nominal_extrinsics" default="true"/>
  
  <arg name="joint_limits_parameters_file" default="$(find ur_description)/config/ur5/joint_limits.yaml"/>  
  <arg name="prefix" default=""/>
  <arg name="kinematics_parameters_file" default="$(find ur_description)/config/ur5/default_kinematics.yaml"/>
  <arg name="physical_parameters_file" default="$(find ur_description)/config/ur5/physical_parameters.yaml"/>
  <arg name="visual_parameters_file" default="$(find ur_description)/config/ur5/visual_parameters.yaml"/>
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <arg name="safety_limits" default="false"/>
  <arg name="safety_pos_margin" default="0.15"/>
  <arg name="safety_k_position" default="20"/>
    
  <arg name="paused" default="true" doc="Starts gazebo in paused mode" />
  <arg name="gui" default="false" doc="Starts gazebo gui" />
  <arg name="verbose" default="false"/>
  <arg name="start_gazebo" default="false"/>
  
  <arg name="debug" default="false" />
  <arg name="sim" default="true" />
  <arg name="random" default="true" doc="Randomize Spawned Target"/>
  
  <arg name="robot_ip" default= "172.19.10.250" doc="IP of the controller" />
  <arg name="reverse_port" default="50001" doc="Port on which controller listens for position values passed to servoj thread from the driver" />
  <arg name="robot_description_file" default="$(find ur_description)/launch/load_ur5_lab.launch" doc="Robot description launch file."/>  

                              
  <group if="$(arg sim)">
                          <!-- Load Robot Parameter -->  
  <param name="robot_description" command="$(find xacro)/xacro '$(find ur_description)/urdf/ur5_new_realsense_lab_gz.urdf.xacro'
    use_nominal_extrinsics:=$(arg use_nominal_extrinsics)
    sim:=$(arg sim)
    prefix:=$(arg prefix)
    joint_limits_parameters_file:=$(arg joint_limits_parameters_file)
    kinematics_parameters_file:=$(arg kinematics_parameters_file)
    physical_parameters_file:=$(arg physical_parameters_file)
    visual_parameters_file:=$(arg visual_parameters_file)
    transmission_hw_interface:=$(arg transmission_hw_interface)
    safety_limits:=$(arg safety_limits)
    safety_pos_margin:=$(arg safety_pos_margin)
    safety_k_position:=$(arg safety_k_position)"
    />
                          <!-- startup simulated world -->
    <include if="$(arg start_gazebo)" file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" default="$(find ur_gazebo)/worlds/lab.world"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="verbose" default="false"/>
    </include>
    
   <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model" args="
    -urdf 
    -param robot_description 
    -model robot
		-J shoulder_pan_joint -0.004839856847334012
		-J shoulder_lift_joint -1.3280407576218067
		-J elbow_joint -0.8018176433220185
		-J wrist_1_joint -2.581589947740982
		-J wrist_2_joint 1.5715976779280068
		-J wrist_3_joint 1.565170611907706
    -unpause" 
    respawn="false" output="screen" />
   
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="125.0" />
      <param name="tf_prefix" type="string" value="" />
    </node>
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />
    
                          <!-- arm controller -->
    <rosparam file="$(find ur_gazebo)/controller/ur5_controllers.yaml" command="load"/>
    
    <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
	  <node name="scaled_pos_joint_traj_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn scaled_pos_joint_traj_controller" respawn="false" output="screen"/>
	  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load  joint_group_pos_controller" />

  </group>
  
  <group unless="$(arg sim)">			 
    
    <include file="$(find ur_robot_driver)/launch/ur5_bringup.launch">
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="reverse_port" value="$(arg reverse_port)"/>
      <arg name="robot_description_file" value="$(arg robot_description_file)"/>
      <arg name="kinematics_config" value="$(arg kinematics_parameters_file)"/>
    </include>
    
  </group>
</launch>
